TOK_KW_PROGRAM: program
TOK_IDENTIFIER: Foo
TOK_SEMICOLON: ;
TOK_KW_CONST: const
TOK_IDENTIFIER: name
TOK_COLON: :
TOK_IDENTIFIER: string
TOK_EQUAL: =
TOK_STRING: foo bar Baz
TOK_SEMICOLON: ;
TOK_KW_VAR: var
TOK_IDENTIFIER: nome
TOK_COLON: :
TOK_IDENTIFIER: integer
TOK_SEMICOLON: ;
TOK_IDENTIFIER: donde
TOK_COLON: :
TOK_IDENTIFIER: integer
TOK_SEMICOLON: ;
TOK_IDENTIFIER: _while
TOK_COLON: :
TOK_IDENTIFIER: char
TOK_SEMICOLON: ;
TOK_IDENTIFIER: _if
TOK_COLON: :
TOK_IDENTIFIER: string
TOK_SEMICOLON: ;
TOK_IDENTIFIER: then_
TOK_COLON: :
TOK_IDENTIFIER: char
TOK_SEMICOLON: ;
TOK_KW_BEGIN: begin
TOK_KW_PROCEDURE: procedure
TOK_IDENTIFIER: Foo
TOK_LPARENTHESIS: (
TOK_IDENTIFIER: nome
TOK_COLON: :
TOK_IDENTIFIER: string
TOK_SEMICOLON: ;
TOK_IDENTIFIER: endereco
TOK_IDENTIFIER: int
TOK_RPARENTHESIS: )
TOK_SEMICOLON: ;
TOK_KW_BEGIN: begin
TOK_KW_VAR: var
TOK_IDENTIFIER: zzzz
TOK_COLON: :
TOK_IDENTIFIER: string
TOK_SEMICOLON: ;
TOK_KW_END: end
TOK_SEMICOLON: ;
TOK_IDENTIFIER: zzz
TOK_ASSIGNMENT: :=
TOK_IDENTIFIER: faz_algo
TOK_LPARENTHESIS: (
TOK_RPARENTHESIS: )
TOK_SEMICOLON: ;
TOK_KW_IF: if
TOK_IDENTIFIER: zzz
TOK_EQUAL: =
TOK_STRING: blabla
TOK_KW_THEN: then
TOK_IDENTIFIER: writeln
TOK_LPARENTHESIS: (
TOK_STRING: vai chover!
TOK_RPARENTHESIS: )
TOK_SEMICOLON: ;
TOK_KW_ELSE: else
TOK_IDENTIFIER: writeln
TOK_LPARENTHESIS: (
TOK_STRING: seila
TOK_RPARENTHESIS: )
TOK_SEMICOLON: ;
TOK_KW_END: end
TOK_KW_IF: if
TOK_SEMICOLON: ;
TOK_KW_END: end
TOK_DOT: .
TOK_KW_END: end
TOK_DOT: .
